##h3=cauchy
x <- rcauchy(n)
omega.hat3 <- mean(g(x)/dcauchy(x))
se.omega.hat3 <- sd(g(x)/dcauchy(x))/sqrt(n)
omega.hat3
se.omega.hat3
##h4=truncated exp
x <- -log(1-runif(n)*(1-exp(-1)))
h4 <- funcion(x) {
omega.hat.4 <- mean(g(x)/h4(x))
h4 <- funcion(x) {
##h4=truncated exp
x <- -log(1-runif(n)*(1-exp(-1)))
h4 <- funcion(x){
##h4=truncated exp
x <- -log(1-runif(n)*(1-exp(-1)))
h4 <- function(x){
exp(-x)/(1-exp(-1))
}
omega.hat.4 <- mean(g(x)/h4(x))
se.omega.hat4 <- sd(g(x)/h4(x))/sqrt(n)
omega.hat.4
se.omega.hat4
#h5=truncated cauchy
x <- tan((pi*runif(n))/4)
h5 <- function(x) {
4/(pi*(1+x^2))
}
omega.hat5 <- mean(g(x)/h5(x))
se.omega.hat5 <- sd(g(x)/h5(x))/sqrt(n)
c(omega.hat1,omega.hat2,omega.hat3,omega.hat.4,omega.hat5)
c(se.omega.hat1,se.omega.hat2,se.omega.hat3,se.omega.hat4,se.omega.hat5)
x <- seq(-5,5,length=100)
plot(x,dnorm(x),type='l',col='blue')
lines(x,dcauchy(x),col='red')
x <- seq(-5,5,length=100)
plot(x,dnorm(x),type='l',col='blue')
lines(x,dcauchy(x),col='red')
n <- 1000
x <- rcauchy(1)
omega <- pnorm(-2,lower.tail=TRUE)
omega.hat.is <- mean((x<=2)*dnorm(x)/dcauchy(x))
var.hat.is <- var((x<=2)*dnorm(x)/dcauchy(x))/sqrt(n)
list(omega=omega,omega.hat=omega.hat.is,var=var.hat.is)
n <- 1000
x <- rcauchy(1)
omega <- pnorm(-2,lower.tail=TRUE)
omega.hat.is <- mean((x<=2)*dnorm(x)/dcauchy(x))
var.hat.is <- var((x<=2)*dnorm(x)/dcauchy(x))/n
list(omega=omega,omega.hat=omega.hat.is,var=var.hat.is)
n <- 1000
x <- rcauchy(1)
omega <- pnorm(-2,lower.tail=TRUE)
omega.hat.is <- mean((x<=2)*dnorm(x)/dcauchy(x))
var.hat.is <- var((x<=2)*dnorm(x)/dcauchy(x))/n
list(omega=omega,omega.hat=omega.hat.is,var=var.hat.is)
n <- 1000
x <- rcauchy(n)
omega <- pnorm(-2,lower.tail=TRUE)
omega.hat.is <- mean((x<=2)*dnorm(x)/dcauchy(x))
var.hat.is <- var((x<=2)*dnorm(x)/dcauchy(x))/n
list(omega=omega,omega.hat=omega.hat.is,var=var.hat.is)
n <- 1000
x <- rcauchy(n)
omega <- pnorm(-2,lower.tail=TRUE)
omega.hat.is <- mean((x<=-2)*dnorm(x)/dcauchy(x))
var.hat.is <- var((x<=-2)*dnorm(x)/dcauchy(x))/n
list(omega=omega,omega.hat=omega.hat.is,var=var.hat.is)
n <- 1000
x <- rnorm(n)
omega.hat.mc <- mean(x<=-2)
var.hat.mc <- var(x<=-2)/n
list(omega=omega,omega.hat=omega.hat.mc,var=var.hat.mc)
n <- 1000
x <- rcauchy(n)
omega <- pnorm(-2,lower.tail=TRUE)
omega.hat.is <- mean((x<=-2)*dnorm(x)/dcauchy(x))
var.hat.is <- var((x<=-2)*dnorm(x)/dcauchy(x))/n
list(omega=omega,omega.hat=omega.hat.is,var=var.hat.is)
x <- seq(-5,5,length=100)
plot(x,dnorm(x),type='l',col='blue')
lines(x,dcauchy(x),col='red')
x <- seq(0,1,length=100)
g <- exp(-x)/(1+x^2)
h1 <- 1
h2 <- exp(-x)
h3 <- 1/(pi*(1+x^2))
h4 <- exp(-x)/(1-exp(-1))
h5 <- 4/(pi*(1+x^2))
par(mfrow=c(2,3))
plot(x,g/h1,type="l",main="h1",ylim=c(0,3))
plot(x,g/h2,type="l",main="h2",ylim=c(0,3))
plot(x,g/h3,type="l",main="h3",ylim=c(0,3))
plot(x,g/h4,type="l",main="h4",ylim=c(0,3))
plot(x,g/h5,type="l",main="h5",ylim=c(0,3))
g <- function(x) {
y <- rep(0,length(x))
id <- which(x>0&x<1)
y[id] <- exp(-x[id]/1+x[id]^2)
return(y)
}
x <- runif(n)
omega.hat1 <- mean(g(x))
se.omega.hat1 <- sd(g(x))/sqrt(n)
omega.hat1
se.omega.hat1
x <- rexp(n)
omega.hat2 <- mean(g(x)/dexp(x))
se.omega.hat2 <- sd(g(x)/dexp(x))/sqrt(n)
omega.hat2
se.omega.hat2
x <- rcauchy(n)
omega.hat3 <- mean(g(x)/dcauchy(x))
se.omega.hat3 <- sd(g(x)/dcauchy(x))/sqrt(n)
omega.hat3
se.omega.hat3
x <- -log(1-runif(n)*(1-exp(-1)))
h4 <- function(x){
exp(-x)/(1-exp(-1))
}
omega.hat.4 <- mean(g(x)/h4(x))
se.omega.hat4 <- sd(g(x)/h4(x))/sqrt(n)
omega.hat.4
se.omega.hat4
x <- tan((pi*runif(n))/4)
h5 <- function(x) {
4/(pi*(1+x^2))
}
omega.hat5 <- mean(g(x)/h5(x))
omega.hat5
se.omega.hat5 <- sd(g(x)/h5(x))/sqrt(n)
se.omega.hat5
c(omega.hat1,omega.hat2,omega.hat3,omega.hat.4,omega.hat5)
c(se.omega.hat1,se.omega.hat2,se.omega.hat3,se.omega.hat4,se.omega.hat5)
library(simpleEnsembleGroup19)
n <- 1000
u <- runif(n)
x <- pi*tan(x)
n <- 1000
u <- runif(n)
x <- pi*tan(u)
omega.hat.is.inv <- mean((x<=2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- pi*tan(u)
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- pi*tan(u)
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- pi*tan(u)
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- pi*tan(u)
qqplot(x,rcauchy(1000))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan(pi*u)
qqplot(x,rcauchy(1000))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*pi)
qqplot(x,rcauchy(1000))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(1/pi))
qqplot(x,rcauchy(1000))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(1/pi))
qqplot(x,rcauchy(1000))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(1/pi))
qqplot(x,rcauchy(1000))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(1/pi))
qqplot(x,rcauchy(1000))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(1/pi))
qqplot(x,rcauchy(1000))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
standardcauchy <- function(n) {
u <- runif(n)
x <- tan((1/pi)*(u-0.5))
x.gold <- rcauchy(1000)
}
qqplot(x,x.gold)
standardcauchy <- function(n) {
u <- runif(n)
x <- tan((1/pi)*(u-0.5))
}
x.gold <- rcauchy(1000)
qqplot(standardcauchy(1000),x.gold)
abline(0,1,col='red')
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(1/pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(1/pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(1/pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
g <- function(x) {
y <- rep(0,length(x))
id <- which(x>0&x<1)
y[id] <- exp(-x[id])/(1+x[id]^2)
return(y)
}
n <- 1000
x <- runif(1000,0,pi/3)
omega.hat.1 <- pi/3*mean(sin(x))
omega.hat.1
omgega <- cos(pi/3)
omega <- cos(pi/3) # Exact value
n <- 1000
x <- runif(1000,0,pi/3)
omega.hat.1 <- pi/3*mean(sin(x))
list(exact = omega, estimated = omega.hat.1)
omega <- cos(pi/3) # Exact value
n <- 1000
x <- runif(1000)
omega.hat.1 <- pi/3*mean(sin(x*pi/3))
list(exact = omega, estimated = omega.hat.1)
omega <- cos(pi/3) # Exact value
n <- 1000
x1 <- runif(n)
omega.hat.1 <- pi/3*mean(sin(x*pi/3))
x2 <- runif(n,0,pi/3)
omega.hat.2 <- (pi/3)*mean(sin(x))
list(exact = omega, estimated1 = omega.hat.1, estimated2 = omega.hat.2)
omega <- 1-exp(-0.5)
n <- 1000
x <- runif(n,0,0.5)
omega.hat <- 0.5*mean(exp(-x))
var.omega.hat <- var(exp(-x)*0.5)/n
list(exact = omega, estimated = omega.hat, estimated variance = var.omega.hat)
omega <- 1-exp(-0.5)
n <- 1000
x <- runif(n,0,0.5)
omega.hat <- 0.5*mean(exp(-x))
var.omega.hat <- var(exp(-x)*0.5)/n
list(exact = omega, estimated = omega.hat, estimated_variance = var.omega.hat)
n <- 1000
x <- rexp(1000)
omega.ast <- mean(x<=0.5)
var.omega.ast <- var(x<=0.5)/n
list(exact = omega, estimated = omega.ast, estimated_variance = var.omega.ast)
omega <- cos(pi/3) # Exact value
n <- 1000
x1 <- runif(n)
omega.hat.1 <- pi/3*mean(sin(x*pi/3))
x2 <- runif(n,0,pi/3)
omega.hat.2 <- (pi/3)*mean(sin(x))
list(exact = omega, estimated1 = omega.hat.1, estimated2 = omega.hat.2)
omega <- 1-exp(-0.5)
n <- 1000
x <- runif(n,0,0.5)
omega.hat <- 0.5*mean(exp(-x))
var.omega.hat <- var(exp(-x)*0.5)/n
list(exact = omega, estimated = omega.hat, estimated_variance = var.omega.hat)
n <- 1000
x <- rexp(1000)
omega.ast <- mean(x<=0.5)
var.omega.ast <- var(x<=0.5)/n
list(exact = omega, estimated = omega.ast, estimated_variance = var.omega.ast)
my.pbeta1 <- function(x,a,b) {
n <- 10000
y <- runif(n,0,x)
B <- (gamma(a)*gamma(b))/gamma(a+b)
gx <- ((y^(a-1))*(1-y)*(b-1))/B
Fx <- x*mean(gx)
return(Fx)
}
n <- 1000
x <- rcauchy(n)
omega <- pnorm(-2,lower.tail=TRUE)
omega.hat.is <- mean((x<=-2)*dnorm(x)/dcauchy(x))
var.hat.is <- var((x<=-2)*dnorm(x)/dcauchy(x))/n
list(omega=omega,omega.hat=omega.hat.is,var=var.hat.is)
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
n <- 1000
u <- runif(n)
x <- tan((u-0.5)*(pi))
omega.hat.is.inv <- mean((x<=-2)*dnorm(x)/dcauchy(x))
omega.hat.is.inv
standardcauchy <- function(n) {
u <- runif(n)
x <- tan((pi)*(u-0.5))
}
x.gold <- rcauchy(1000)
qqplot(standardcauchy(1000),x.gold)
abline(0,1,col='red')
standardcauchy <- function(n) {
u <- runif(n)
x <- tan((1/pi)*(u-0.5))
}
x.gold <- rcauchy(1000)
qqplot(standardcauchy(1000),x.gold)
abline(0,1,col='red')
install.package("LaTeX")
install.packages("LaTeX")
library(simpleEnsembleGroup19)
lm <- lm(cont.y~cont.x)
class(lm)
rm <_ cv.glmnet(cont.x,cont.y,alpha=0)
rm <- cv.glmnet(cont.x,cont.y,alpha=0)
class(rm)
rm$cvm
rm$index
coef(rm)
setwd(/Users/Chaeeunshin/Desktop/AMS 580)
setwd("/Users/chaeeunshin/Desktop/AMS 580")
Titanic <- read.csv("Titanic.csv")
str(Titanic)
Titanic <- read.csv("Titanic.csv")
str(Titanic)
Titanic <- Titanic[,-c(4,9,11)]
str(Titanic)
Titanic <- read.csv("Titanic.csv")
Titanic <- Titanic[,-c(4,9,11)]
Titanic <- Titanic[-which(is.na(Titanic$Age))]
Titanic <- read.csv("Titanic.csv")
Titanic <- Titanic[,-c(4,9,11)]
Titanic <- Titanic[-which(is.na(Titanic$Age))]
Titanic$Survived <- as.factor(Titanic$Survived)
Titanic$Pclass <- as.factor(Titanic$Pclass)
Titanic <- read.csv("Titanic.csv")
Titanic <- Titanic[,-c(4,9,11)]
Titanic <- Titanic[-which(is.na(Titanic$Age))]
Titanic$Survived <- as.factor(Titanic$Survived)
Titanic$Pclass <- as.factor(Titanic$Pclass)
cat("There are",nrow(Titanic), "passengers left.")
Titanic <- read.csv("Titanic.csv")
nrow(Titanic)
Titanic <- Titanic[,-c(4,9,11)]
Titanic <- Titanic[-which(is.na(Titanic$Age))]
Titanic$Survived <- as.factor(Titanic$Survived)
Titanic$Pclass <- as.factor(Titanic$Pclass)
cat("There are",nrow(Titanic), "passengers left.")
Titanic <- read.csv("Titanic.csv")
Titanic <- Titanic[,-c(4,9,11)]
Titanic <- Titanic[-which(is.na(Titanic$Age)),]
Titanic$Survived <- as.factor(Titanic$Survived)
Titanic$Pclass <- as.factor(Titanic$Pclass)
cat("There are",nrow(Titanic), "passengers left.")
Titanic <- read.csv("Titanic.csv")
Titanic <- Titanic[,-c(4,9,11)]
Titanic <- Titanic[-which(is.na(Titanic$Age))]
Titanic$Survived <- as.factor(Titanic$Survived)
Titanic$Pclass <- as.factor(Titanic$Pclass)
cat("There are",nrow(Titanic), "passengers left.")
library(caret)
library(tidyverse)
set.seed(123)
library(caret)
library(tidyverse)
set.seed(123)
training_samples <- Titanic$Survived %>%
createDataPartition(p=0.75,list=FALSE)
train_data <- Titanic[training_samples,]
test_data <- Titanic[test_samples,]
library(caret)
library(tidyverse)
set.seed(123)
training_samples <- Titanic$Survived %>%
createDataPartition(p=0.75,list=FALSE)
train_data <- Titanic[training_samples,]
test_data <- Titanic[-training_samples,]
nrow(train_data)
nrow(test_data)
Titanic <- read.csv("Titanic.csv")
Titanic <- Titanic[,-c(1,4,9,11)]
Titanic <- Titanic[-which(is.na(Titanic$Age))]
Titanic$Survived <- as.factor(Titanic$Survived)
Titanic$Pclass <- as.factor(Titanic$Pclass)
Titanic$Age <- scale(Titanic$Age)
Titanic$Fare <- scale(Titanic$Fare)
cat("There are",nrow(Titanic), "passengers left.")
Titanic <- read.csv("Titanic.csv")
Titanic <- Titanic[,-c(1,4,9,11)]
Titanic <- Titanic[-which(is.na(Titanic$Age)),]
Titanic$Survived <- as.factor(Titanic$Survived)
Titanic$Pclass <- as.factor(Titanic$Pclass)
Titanic$Age <- scale(Titanic$Age)
Titanic$Fare <- scale(Titanic$Fare)
cat("There are",nrow(Titanic), "passengers left.")
library(caret)
library(tidyverse)
set.seed(123)
training_samples <- Titanic$Survived %>%
createDataPartition(p=0.75,list=FALSE)
train_data <- Titanic[training_samples,]
test_data <- Titanic[-training_samples,]
nrow(train_data)
nrow(test_data)
set.seed(123)
model <- train(Survived~., data=train_data, method="svmLinear", trControl = trainControl("cv",number = 10))
predicted_class <- model %>% predict(test.data)
library(kernlab)
set.seed(123)
model <- train(Survived~., data=train_data, method="svmLinear", trControl = trainControl("cv",number = 10))
predicted_class <- model %>% predict(test_data)
confusionMatrix(factor(predicted_class),factor(test_data$Survived),positive='1')
set.seed(123)
model <- train(Survived~.,data=train_data,method="svmLinear",trControl=trainControl("cv",number=10),tuneGrid=expand.grid(C=seq(0.1,2,length=19)))
plot(model)
model$bestTune
set.seed(123)
model <- train(Survived~.,data=train_data,method="svmLinear",trControl=trainControl("cv",number=10),tuneGrid=expand.grid(C=seq(0.1,2,length=19)))
plot(model) #plot model accuracy vs. different values of Cost
model$bestTune #the best tuning parameter that maximizes model accuracy
model <- train(Survived~.,data=train_data,method="svmLinear",trControl=trainControl("cv",number=10),tuneGrid=expand.grid(C=0.1)) #refit a model using the best tuning parameter
predicted_class <- model %>% predict(test_data)
confusionMatrix(factor(predicted_class),factor(test_data$Survived),positive='1')
set.seed(123)
model <- train(Survived~., data=train_data, method="svmPoly",trControl=trainControl("cv",number=10),tuneLength=4)
model$bestTune # Print the best tuning parameter sigma and C that maximizes model accuracy
predicted_class <- model %>% predict(test_data)
confusionMatrix(factor(predicted_class),factor(test_data$Survived),positive="1")
set.seed(123)
model <- train(Survived~.,data=train_data,method="svmRadial",trControl=trainControl("cv",number=10),tunelength=10)
model$bestTune # Print the best tuning parameter sigma and C that maximizes model accuracy
predicted_class <- model %>% predict(test_data)
confusionMatrix(factor(predicted_class),factor(test_data$Survived),positive='1')
set.seed(123)
model <- train(Survived~.,data=train_data,method="svmLinear",trControl=trainControl("cv",number=10),tuneGrid=expand.grid(C=seq(0.1,2,length=19)))
plot(model) #plot model accuracy vs. different values of Cost
model$bestTune #the best tuning parameter that maximizes model accuracy
model <- train(Survived~.,data=train_data,method="svmLinear",trControl=trainControl("cv",number=10),tuneGrid=expand.grid(C=0.1)) #refit a model using the best tuning parameter
predicted_class <- model %>% predict(test_data)
confusionMatrix(factor(predicted_class),factor(test_data$Survived),positive='1')
